android {
    buildToolsVersion "28.0.3"
    compileSdkVersion 28
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }
    defaultConfig {
        applicationId "com.snake8bit.game"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 7
        versionName "1.2.1"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() { 
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/arm64-v8a/").mkdirs();
    file("libs/x86_64/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")        
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.snake8bit.game/com.snake8bit.game.AndroidLauncher'
}

// sets up the Android Eclipse project, using the old Ant based build.
eclipse {
    // need to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin
    // ignores any nodes added in classpath.file.withXml
    sourceSets {
        main {
            java.srcDirs "src", 'gen'
        }
    }

    jdt {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    classpath {
        plusConfigurations += [ project.configurations.compile ]        
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'       
    }

    project {
        name = appName + "-android"
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear();
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [ COMPILE: [plus:[project.configurations.compile]]]        

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value:"true")
                        }
                    }
                }
            }
        }
    }
}

//Google API
dependencies {

//Google+
    //implementation 'com.google.android.gms:play-services-plus:15.0.1'
//Google Account Login
    implementation 'com.google.android.gms:play-services-auth:15.0.1'
//Google Actions, Base Client Library
    //implementation 'com.google.android.gms:play-services-base:15.0.1'
//Google Sign In
    //implementation 'com.google.android.gms:play-services-identity:15.0.1'
//Google Analytics
    //implementation 'com.google.android.gms:play-services-analytics:15.0.2'
//Google Awareness
    //implementation 'com.google.android.gms:play-services-awareness:15.0.1'
//Google Cast
    //implementation 'com.google.android.gms:play-services-cast:15.0.1'
//Google Cloud Messaging
    //implementation 'com.google.android.gms:play-services-gcm:15.0.1'
//Google Drive
    //implementation 'com.google.android.gms:play-services-drive:15.0.1'
//Google Fit
    //implementation 'com.google.android.gms:play-services-fitness:15.0.1'
//Google Location and Activity Recognition
    //implementation 'com.google.android.gms:play-services-location:15.0.1'
//Google Maps
    //implementation 'com.google.android.gms:play-services-maps:15.0.1'
//Google Mobile Ads
    implementation 'com.google.android.gms:play-services-ads:15.0.1'
//Google Places
    implementation 'com.google.android.gms:play-services-places:15.0.1'
//Mobile Vision
    //implementation 'com.google.android.gms:play-services-vision:15.0.2'
//Google Nearby
    //implementation 'com.google.android.gms:play-services-nearby:15.0.1'
//Google Panorama Viewer
    //implementation 'com.google.android.gms:play-services-panorama:15.0.1'
//Google Play Game services
    implementation 'com.google.android.gms:play-services-games:15.0.1'
//SafetyNet
    //implementation 'com.google.android.gms:play-services-safetynet:15.0.1'
//Android Pay
    //implementation 'com.google.android.gms:play-services-wallet:15.0.1'
//Wear OS by Google
    //implementation 'com.google.android.gms:play-services-wearable:15.0.1'


// Support Library Packages
//v4 compat library
    implementation 'com.android.support:support-compat:27.1.1'
//v4 core-utils library
    //implementation 'com.android.support:support-core-utils:27.1.1'
//v4 core-ui library
    //implementation 'com.android.support:support-core-ui:27.1.1'
//v4 media-compat library
    //implementation 'com.android.support:support-media-compat:27.1.1'
//v4 fragment library
    //implementation 'com.android.support:support-fragment:27.1.1'
//Multidex Support Library
    implementation 'com.android.support:multidex:1.0.2'
//v7 appcompat library
    implementation 'com.android.support:appcompat-v7:27.1.1'
//v7 cardview library
    //implementation 'com.android.support:cardview-v7:27.1.1'
//v7 gridlayout library
    //implementation 'com.android.support:gridlayout-v7:27.1.1'
//v7 mediarouter library
    //implementation 'com.android.support:mediarouter-v7:27.1.1'
//v7 palette library
    //implementation 'com.android.support:palette-v7:27.1.1'
//v7 recyclerview library
    //implementation 'com.android.support:recyclerview-v7:27.1.1'
//v7 Preference Support Library
    //implementation 'com.android.support:preference-v7:27.1.1'
//v8 renderscript library
    /*defaultConfig {
        renderscriptTargetApi 18
        renderscriptSupportModeEnabled true
    }*/
//v13 Support Library
    implementation 'com.android.support:support-v13:27.1.1'
//v14 Preference Support Library
    //implementation 'com.android.support:preference-v14:27.1.1'
//v17 Preference Support Library for TV
    //implementation 'com.android.support:preference-leanback-v17:27.1.1'
//v17 Leanback Library
    //implementation 'com.android.support:leanback-v17:27.1.1'
//Vector Drawable Library
    //implementation 'com.android.support:support-vector-drawable:27.1.1'
//Animated Vector Drawable Library
    //implementation 'com.android.support:animated-vector-drawable:27.1.1'
//Annotations Support Library
    //implementation 'com.android.support:support-annotations:27.1.1'
//Design Support Library
    //implementation 'com.android.support:design:27.1.1'
//Custom Tabs Support Library
    //implementation 'com.android.support:customtabs:27.1.1'
//Percent Support Library
    //implementation 'com.android.support:percent:27.1.1'
//ExifInterface Support Library
    //implementation 'com.android.support:exifinterface:27.1.1'
//App Recommendation Support Library for TV
    //implementation 'com.android.support:recommendation:27.1.1'
//Wear UI Library
    //implementation 'com.android.support:wear:27.1.1'
}